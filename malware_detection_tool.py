import hashlib
from termcolor import colored

# specific file theke hash value read korbe
def read_hashes(file_path):
    try:
        with open(file_path, 'r') as f:
            return set(line.strip() for line in f)
    except FileNotFoundError:
        print(f"Error: Hash file not found: {file_path}")
        return set()

# Hash calculation function use kore value calculate korbe
def calculate_hash(file_path, hash_type):
    try:
        hash_function = hashlib.new(hash_type)
        with open(file_path, 'rb') as f:
            while chunk := f.read(4096):
                hash_function.update(chunk)
        return hash_function.hexdigest()
    except FileNotFoundError:
        print(f"Error: File not found: {file_path}")
        return None
    except ValueError:
        print(f"Error: Unsupported hash type: {hash_type}")
        return None

# dataset theke hash value match korabe and report korbe
def match_hash_with_file(hash_value, hash_set):
    return hash_value in hash_set

# File analysis korbe
def file_analysis():
    file_path = input("Enter the full file path to scan: ").strip()
    
    # malware database er path/location
    database_dir = "G:\\GUB\\CS\\Project\\malware_detection_tool\\malware_db"
    md5_db_path = f"{database_dir}\\md5_hash.txt"
    sha1_db_path = f"{database_dir}\\sha1_hash.txt"
    sha256_db_path = f"{database_dir}\\sha256_hash.txt"

    # database theke hashvalue load korbe
    md5_hashes = read_hashes(md5_db_path)
    sha1_hashes = read_hashes(sha1_db_path)
    sha256_hashes = read_hashes(sha256_db_path)

    # Hash types and their respective database
    hash_algorithms = {
        'md5': md5_hashes,
        'sha1': sha1_hashes,
        'sha256': sha256_hashes
    }

    # Calculate and check hashes
    for algo, hash_set in hash_algorithms.items():
        hash_value = calculate_hash(file_path, algo)
        if hash_value:
            if match_hash_with_file(hash_value, hash_set):
                print(colored(f"WARNING: {algo.upper()} hash matches known malware signature: {hash_value}", 'red'))
            else:
                print(colored(f"{algo.upper()}: {hash_value} - No match found", 'green'))
        else:
            print(f"Error: Could not calculate {algo.upper()} hash for the file.")

# Hash analysis functionality
def hash_analysis():
    hash_type = input("Enter the hash type (md5, sha1, sha256): ").strip().lower()
    if hash_type not in ['md5', 'sha1', 'sha256']:
        print("Invalid hash type. Please choose from md5, sha1, or sha256.")
        return

    hash_value = input("Enter the hash value to check: ").strip()

    # Path to the malware database file
    database_dir = "G:\\GUB\\CS\\Project\\malware_detection_tool\\malware_db"
    db_paths = {
        'md5': f"{database_dir}\\md5_hash.txt",
        'sha1': f"{database_dir}\\sha1_hash.txt",
        'sha256': f"{database_dir}\\sha256_hash.txt"
    }

    # Load the respective hash database
    hash_set = read_hashes(db_paths[hash_type])
    if match_hash_with_file(hash_value, hash_set):
        print(colored(f"WARNING: {hash_type.upper()} hash matches known malware signature: {hash_value}", 'red'))
    else:
        print(colored(f"{hash_type.upper()} hash: {hash_value} - No match found", 'green'))

# About me functionality
def about_me():
    print("\n==== About Me ====")
    print("Hello! My name is Rahul Islam, and I am a cybersecurity enthusiast and developer.")
    print("This project is designed to help users detect potential malware by analyzing file hashes.")
    print("GitHub: https://github.com/rahul-joy")
    print("==================\n")

# Main menu er option pore likhbo
def main():
    while True:
        print("\n====== Main Menu ======")
        print("1. File Analysis")
        print("2. Hash Analysis")
        print("3. About Me")
        print("4. Exit")
        print("=======================")
        
        choice = input("Choose an option (1-4): ").strip()

        if choice == '1':
            file_analysis()
        elif choice == '2':
            hash_analysis()
        elif choice == '3':
            about_me()
        elif choice == '4':
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
